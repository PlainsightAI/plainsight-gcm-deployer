// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package buffs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HealthClient is the client API for Health service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthClient interface {
	Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	Watch(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (Health_WatchClient, error)
}

type healthClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthClient(cc grpc.ClientConnInterface) HealthClient {
	return &healthClient{cc}
}

func (c *healthClient) Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/buffs.Health/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthClient) Watch(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (Health_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &Health_ServiceDesc.Streams[0], "/buffs.Health/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &healthWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Health_WatchClient interface {
	Recv() (*HealthCheckResponse, error)
	grpc.ClientStream
}

type healthWatchClient struct {
	grpc.ClientStream
}

func (x *healthWatchClient) Recv() (*HealthCheckResponse, error) {
	m := new(HealthCheckResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HealthServer is the server API for Health service.
// All implementations must embed UnimplementedHealthServer
// for forward compatibility
type HealthServer interface {
	Check(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	Watch(*HealthCheckRequest, Health_WatchServer) error
	mustEmbedUnimplementedHealthServer()
}

// UnimplementedHealthServer must be embedded to have forward compatible implementations.
type UnimplementedHealthServer struct {
}

func (UnimplementedHealthServer) Check(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedHealthServer) Watch(*HealthCheckRequest, Health_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedHealthServer) mustEmbedUnimplementedHealthServer() {}

// UnsafeHealthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthServer will
// result in compilation errors.
type UnsafeHealthServer interface {
	mustEmbedUnimplementedHealthServer()
}

func RegisterHealthServer(s grpc.ServiceRegistrar, srv HealthServer) {
	s.RegisterService(&Health_ServiceDesc, srv)
}

func _Health_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buffs.Health/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServer).Check(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Health_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HealthCheckRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HealthServer).Watch(m, &healthWatchServer{stream})
}

type Health_WatchServer interface {
	Send(*HealthCheckResponse) error
	grpc.ServerStream
}

type healthWatchServer struct {
	grpc.ServerStream
}

func (x *healthWatchServer) Send(m *HealthCheckResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Health_ServiceDesc is the grpc.ServiceDesc for Health service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Health_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "buffs.Health",
	HandlerType: (*HealthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _Health_Check_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _Health_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}

// ManagementAPIClient is the client API for ManagementAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagementAPIClient interface {
	SaveOffer(ctx context.Context, in *SaveOfferReq, opts ...grpc.CallOption) (*SaveOfferRes, error)
	CreateDeployment(ctx context.Context, in *CreateDeploymentReq, opts ...grpc.CallOption) (*CreateDeploymentRes, error)
	ReadDeployments(ctx context.Context, in *ReadDeploymentReq, opts ...grpc.CallOption) (*ReadDeploymentRes, error)
	ReadTenants(ctx context.Context, in *ReadTenantReq, opts ...grpc.CallOption) (*ReadTenantRes, error)
	ReadEntitlements(ctx context.Context, in *ReadEntitlementReq, opts ...grpc.CallOption) (*ReadEntitlementsRes, error)
	Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingRes, error)
	ActiveEntitlement(ctx context.Context, in *ActiveEntitlementReq, opts ...grpc.CallOption) (*ActiveEntitlementRes, error)
}

type managementAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewManagementAPIClient(cc grpc.ClientConnInterface) ManagementAPIClient {
	return &managementAPIClient{cc}
}

func (c *managementAPIClient) SaveOffer(ctx context.Context, in *SaveOfferReq, opts ...grpc.CallOption) (*SaveOfferRes, error) {
	out := new(SaveOfferRes)
	err := c.cc.Invoke(ctx, "/buffs.ManagementAPI/SaveOffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementAPIClient) CreateDeployment(ctx context.Context, in *CreateDeploymentReq, opts ...grpc.CallOption) (*CreateDeploymentRes, error) {
	out := new(CreateDeploymentRes)
	err := c.cc.Invoke(ctx, "/buffs.ManagementAPI/CreateDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementAPIClient) ReadDeployments(ctx context.Context, in *ReadDeploymentReq, opts ...grpc.CallOption) (*ReadDeploymentRes, error) {
	out := new(ReadDeploymentRes)
	err := c.cc.Invoke(ctx, "/buffs.ManagementAPI/ReadDeployments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementAPIClient) ReadTenants(ctx context.Context, in *ReadTenantReq, opts ...grpc.CallOption) (*ReadTenantRes, error) {
	out := new(ReadTenantRes)
	err := c.cc.Invoke(ctx, "/buffs.ManagementAPI/ReadTenants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementAPIClient) ReadEntitlements(ctx context.Context, in *ReadEntitlementReq, opts ...grpc.CallOption) (*ReadEntitlementsRes, error) {
	out := new(ReadEntitlementsRes)
	err := c.cc.Invoke(ctx, "/buffs.ManagementAPI/ReadEntitlements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementAPIClient) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingRes, error) {
	out := new(PingRes)
	err := c.cc.Invoke(ctx, "/buffs.ManagementAPI/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementAPIClient) ActiveEntitlement(ctx context.Context, in *ActiveEntitlementReq, opts ...grpc.CallOption) (*ActiveEntitlementRes, error) {
	out := new(ActiveEntitlementRes)
	err := c.cc.Invoke(ctx, "/buffs.ManagementAPI/ActiveEntitlement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagementAPIServer is the server API for ManagementAPI service.
// All implementations must embed UnimplementedManagementAPIServer
// for forward compatibility
type ManagementAPIServer interface {
	SaveOffer(context.Context, *SaveOfferReq) (*SaveOfferRes, error)
	CreateDeployment(context.Context, *CreateDeploymentReq) (*CreateDeploymentRes, error)
	ReadDeployments(context.Context, *ReadDeploymentReq) (*ReadDeploymentRes, error)
	ReadTenants(context.Context, *ReadTenantReq) (*ReadTenantRes, error)
	ReadEntitlements(context.Context, *ReadEntitlementReq) (*ReadEntitlementsRes, error)
	Ping(context.Context, *PingReq) (*PingRes, error)
	ActiveEntitlement(context.Context, *ActiveEntitlementReq) (*ActiveEntitlementRes, error)
	mustEmbedUnimplementedManagementAPIServer()
}

// UnimplementedManagementAPIServer must be embedded to have forward compatible implementations.
type UnimplementedManagementAPIServer struct {
}

func (UnimplementedManagementAPIServer) SaveOffer(context.Context, *SaveOfferReq) (*SaveOfferRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveOffer not implemented")
}
func (UnimplementedManagementAPIServer) CreateDeployment(context.Context, *CreateDeploymentReq) (*CreateDeploymentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeployment not implemented")
}
func (UnimplementedManagementAPIServer) ReadDeployments(context.Context, *ReadDeploymentReq) (*ReadDeploymentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadDeployments not implemented")
}
func (UnimplementedManagementAPIServer) ReadTenants(context.Context, *ReadTenantReq) (*ReadTenantRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadTenants not implemented")
}
func (UnimplementedManagementAPIServer) ReadEntitlements(context.Context, *ReadEntitlementReq) (*ReadEntitlementsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadEntitlements not implemented")
}
func (UnimplementedManagementAPIServer) Ping(context.Context, *PingReq) (*PingRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedManagementAPIServer) ActiveEntitlement(context.Context, *ActiveEntitlementReq) (*ActiveEntitlementRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActiveEntitlement not implemented")
}
func (UnimplementedManagementAPIServer) mustEmbedUnimplementedManagementAPIServer() {}

// UnsafeManagementAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagementAPIServer will
// result in compilation errors.
type UnsafeManagementAPIServer interface {
	mustEmbedUnimplementedManagementAPIServer()
}

func RegisterManagementAPIServer(s grpc.ServiceRegistrar, srv ManagementAPIServer) {
	s.RegisterService(&ManagementAPI_ServiceDesc, srv)
}

func _ManagementAPI_SaveOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveOfferReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementAPIServer).SaveOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buffs.ManagementAPI/SaveOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementAPIServer).SaveOffer(ctx, req.(*SaveOfferReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementAPI_CreateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeploymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementAPIServer).CreateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buffs.ManagementAPI/CreateDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementAPIServer).CreateDeployment(ctx, req.(*CreateDeploymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementAPI_ReadDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadDeploymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementAPIServer).ReadDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buffs.ManagementAPI/ReadDeployments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementAPIServer).ReadDeployments(ctx, req.(*ReadDeploymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementAPI_ReadTenants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadTenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementAPIServer).ReadTenants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buffs.ManagementAPI/ReadTenants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementAPIServer).ReadTenants(ctx, req.(*ReadTenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementAPI_ReadEntitlements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadEntitlementReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementAPIServer).ReadEntitlements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buffs.ManagementAPI/ReadEntitlements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementAPIServer).ReadEntitlements(ctx, req.(*ReadEntitlementReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementAPI_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementAPIServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buffs.ManagementAPI/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementAPIServer).Ping(ctx, req.(*PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementAPI_ActiveEntitlement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActiveEntitlementReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementAPIServer).ActiveEntitlement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buffs.ManagementAPI/ActiveEntitlement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementAPIServer).ActiveEntitlement(ctx, req.(*ActiveEntitlementReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ManagementAPI_ServiceDesc is the grpc.ServiceDesc for ManagementAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManagementAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "buffs.ManagementAPI",
	HandlerType: (*ManagementAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveOffer",
			Handler:    _ManagementAPI_SaveOffer_Handler,
		},
		{
			MethodName: "CreateDeployment",
			Handler:    _ManagementAPI_CreateDeployment_Handler,
		},
		{
			MethodName: "ReadDeployments",
			Handler:    _ManagementAPI_ReadDeployments_Handler,
		},
		{
			MethodName: "ReadTenants",
			Handler:    _ManagementAPI_ReadTenants_Handler,
		},
		{
			MethodName: "ReadEntitlements",
			Handler:    _ManagementAPI_ReadEntitlements_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _ManagementAPI_Ping_Handler,
		},
		{
			MethodName: "ActiveEntitlement",
			Handler:    _ManagementAPI_ActiveEntitlement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
